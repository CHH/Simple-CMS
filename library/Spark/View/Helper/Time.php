<?phpclass Spark_View_Helper_Time extends Zend_View_Helper_Abstract{    const SECOND = 1;  const MINUTE = 60;  const HOUR = 3600;  const DAY = 86400;    protected $_monthNames = array(1=>'Jänner',2=>'Februar',3=>'März',4=>'April',5=>'Mai',                    6=>'Juni',7=>'Juli',8=>'August',9=>'September',10=>'Oktober',                    11=>'November',12=>'Dezember');                      protected $_monthNamesShort = array(1=>'Jän',2=>'Feb',3=>'März',4=>'April',5=>'Mai',                    6=>'Juni',7=>'Juli',8=>'Aug',9=>'Sept',10=>'Okt',                    11=>'Nov',12=>'Dez');    public function time()  {    return $this;  }    public function timeAgoInWords($datetime)  {    $months = $this->_monthNames;        $timestamp  = $this->_getTimeStamp($datetime);        $diff = time() - $timestamp;        if( ($diff >= 0) && ($diff < self::MINUTE) ) {      $message = ($diff > 1) ? "vor {$diff} Sekunden" : "vor einer Sekunde";          } elseif( ($diff >= self::MINUTE) && ($diff < self::HOUR) ) {      $minutes = floor($diff / 60);      $message = ($minutes > 1) ? "vor {$minutes} Minuten" : "vor einer Minute";          } elseif( ($diff >= self::HOUR) && ($diff < self::DAY)) {      $hours = floor($diff / (60 * 60));      $message = ($hours > 1) ? "vor {$hours} Stunden" : "vor einer Stunde";          } elseif( ($diff >= self::DAY) && ($diff < 2 * self::DAY) ) {      $days = floor($diff / (24 * 60 * 60));      $message = "Gestern";          } elseif( ($diff >= 2 * self::DAY) && ($diff < 7 * self::DAY) ) {      $days = floor($diff / (24 * 60 * 60));      $message = "vor {$days} Tagen";          } else {      $message = "am ".date("j. ",$timestamp).$months[date("n",$timestamp)]." ".      date("Y",$timestamp)." um ".date("H:i",$timestamp);      $message = htmlentities($message);    }        return $message;      }    public function timeAgoInWordsShort($datetime)  {    $months = $this->_monthNamesShort;        $timestamp  = $this->_getTimeStamp($datetime);        $diff = time() - $timestamp;        if( ($diff >= 0) && ($diff < self::MINUTE) ) {      $message = ($diff > 1) ? "< {$diff} Sek" : "< 1 Sek";          } elseif( ($diff >= self::MINUTE) && ($diff < self::HOUR) ) {      $minutes = floor($diff / self::MINUTE);      $message = ($minutes > 1) ? "< {$minutes} Min" : "< 1 Min";          } elseif( ($diff >= self::HOUR) && ($diff < self::DAY)) {      $hours = floor($diff / self::HOUR);      $message = ($hours > 1) ? "< {$hours} Std " : "< 1 Std";          } else {      $message = date("j. ",$timestamp).$months[date("n",$timestamp)]." ".      date("y",$timestamp);            $message = htmlentities($message);    }        return $message;      }    public function dateShort($datetime)  {    $timestamp = $this->_getTimestamp($datetime);        $months = $this->_monthNamesShort;        $message = "";    $message .= '<span class="day">'    . date("j", $timestamp) . '</span>. ';    $message .= '<span class="month">'  . $months[date("n",$timestamp)] . '</span> ';    if(date("Y", $timestamp) != date("Y")) {      $message .= '<span class="year">'   . date("y", $timestamp) . '</span>';    }    return $message;  }    public function timeShort($datetime)  {    $timestamp = $this->_getTimestamp($datetime);        $message = "";        $message .= '<span class="hour">' . date("H", $timestamp) . '</span>';    $message .= '<span class="minute">'.date("i", $timestamp).'</span>';        return $message;  }    public function format($datetime,$format = "d.M.Y H:i:s")  {    $timestamp = $this->_getTimeStamp($datetime);    return date($format,$timestamp);  }    protected function _getTimeStamp($datetime)  {    if(is_string($datetime)) {      $timestamp = strtotime($datetime);    } elseif(is_integer($datetime)) {      $timestamp = $datetime;    } else {      throw new Zend_Exception("Value is not a valid Date/Time");    }        if($timestamp == -1) {      throw new Zend_Exception("Value is not a valid Date/Time");    }        return $timestamp;  }  }?>